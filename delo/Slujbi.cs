using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraTreeList.Nodes;


namespace delo
{
    public partial class Slujbi : DevExpress.XtraEditors.XtraForm
    {

        int check2 = 0;
        int check1 = 0;
        int id_sl;
        public Slujbi( int id_slujbi)
        {
            id_sl = id_slujbi;
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            if (id_sl == 0|| id_sl == 23||Globals.id_user==45)
            {
                spr_slujbiTableAdapter1.Fill(deloDataSet1.spr_slujbi);
            }
            else { spr_slujbiTableAdapter1.FillByZavis(deloDataSet1.spr_slujbi,Globals.id_slujbi); }
        }

        private void treeList1_BeforeCheckNode(object sender, DevExpress.XtraTreeList.CheckNodeEventArgs e)
        {
            e.State = (e.PrevState == CheckState.Checked ? CheckState.Unchecked : CheckState.Checked); 
        }

            
       
        private void treeList1_AfterCheckNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {

            SetCheckedChildNodes(e.Node, e.Node.CheckState);
            SetCheckedParentNodes(e.Node, e.Node.CheckState);
           

        }
        private void SetCheckedChildNodes (DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check) 
        {
            check2 = 1;
                 for (int i = 0; i <node.Nodes.Count; i++) 
            { 
                   node.Nodes [i]. CheckState = check; 
                   SetCheckedChildNodes (node.Nodes [i], check); 
            } 
        }
        private void SetCheckedParentNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check1 = 1;
                if (node.ParentNode != null)
                {
                    bool b = false;
                    CheckState state;
                    for (int i = 0; i < node.ParentNode.Nodes.Count; i++)
                    {
                        state = (CheckState)node.ParentNode.Nodes[i].CheckState;
                        if (!check.Equals(state))
                        {
                            b = true;
                            break;
                        }
                    }
                    node.ParentNode.CheckState = b ? CheckState.Indeterminate : check;
                    SetCheckedParentNodes(node.ParentNode, check);
                } 
                  }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {
                    bool svod;
                    string note;
                    DateTime? date;
                    string ll = no.GetValue(treeListColumn1).ToString();
                   
                    string ll1 = no.GetValue(treeListColumn2).ToString();
                    string ll2 = no.GetValue(treeListColumn3).ToString();
                    string ll3 = no.GetValue(treeListColumn4).ToString();
                    int id_res = Convert.ToInt32(ll);
                    if (ll1 != "")
                    { svod = Convert.ToBoolean(ll1); }
                    else { svod = false; }
                    if (ll2 != "")
                    { note = Convert.ToString(ll2); }
                    else { note = ""; }
                    if (ll3 != "")
                    { date = Convert.ToDateTime(ll3); }
                    else { date =null; }
                    //this.rassylka_vizaTableAdapter.FillBy(this.deloDataSet1.rassylka_viza, Globals.id_doc,id_res);
                    //if (rassylka_vizaBindingSource.Count > 0)
                    //{
                    //    spr_slujbiTableAdapter1.FillByNazvanie(this.deloDataSet1.spr_slujbi, id_res);
                    //    Globals.name_slujba = (string)((DataRowView)rassylka_vizaBindingSource.Current).Row["nazv_slujbi"];
                    //    MessageBox.Show("Этот документ уже отправлен "+ Globals.name_slujba);
                    //    spr_slujbiTableAdapter1.Fill(deloDataSet1.spr_slujbi);
                    //    return;
                    //}
                    //else { 
                    int id_doc;
                    if ( Globals.but_click ==1) { id_doc = Globals.id_doc_protokol; }
                    else { id_doc = Globals.id_doc; }
                    queriesTableAdapter1.insert_rassylka_doc(id_doc, Globals.id_user, id_res, note, svod,date);
                   // }

                }
               
            }
            else { MessageBox.Show("Выберите куда отправить документ"); }
            this.Close();
           // Globals.en_delegate(); 
            
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        { 
            this.Close();
           // Globals.en_delegate();
            
        }

        private void Slujbi_Load(object sender, EventArgs e)
        {

        }

        private void rassylka_vizaBindingSource_CurrentItemChanged(object sender, EventArgs e)
        {
            try {

                Globals.name_slujba = (string)((DataRowView)rassylka_vizaBindingSource.Current).Row["id"];
            }
        catch{}
        }

       
    }
}
